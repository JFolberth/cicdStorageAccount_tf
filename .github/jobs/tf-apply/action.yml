name: 'Publish Artifact'
description: 'Publish an artifact for a GitHub Actions workflow'
inputs:
  environmentName: 
    description: 'The environment name for the .tfvars'
    required: true
  backendResourceGroupName:
    description: 'The name of the resource group for the backend storage account'
    required: true
  backendStorageAccountName:
    description: 'The name of the storage account for the backend storage account'
    required: true
  backendStorageContainerName:
    description: 'The name of the storage container for the backend storage account'
    required: true
  workingDirectory:
    description: 'The working directory for the Terraform commands'
    required: true
    default: '/infrastructure'
  shell:
    description: 'The shell to use for the Terraform commands'
    required: true
    default: bash
runs:
  using: composite
  steps: 
  - name: Setup Terraform
    uses: hashicorp/setup-terraform@v3
    with:
      terraform_wrapper: false

  # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
  - name: Terraform Init
    shell: ${{ inputs.shell }}
    working-directory: ${{ inputs.workingDirectory }}
    run: |
      terraform init \
        -backend-config="resource_group_name=${{ inputs.backendResourceGroupName }}"   \
        -backend-config="storage_account_name=${{ inputs.backendStorageAccountName }}" \
        -backend-config="container_name=${{ inputs.backendStorageContainerName }}" \
        -backend-config="key=terraform.tfstate"     \

  # Generates an execution plan for Terraform
  # An exit code of 0 indicated no changes, 1 a terraform failure, 2 there are pending changes.
  - name: Terraform Plan
    shell: ${{ inputs.shell }}
    working-directory: ${{ inputs.workingDirectory }}
    id: tf-plan
    run: |
      terraform plan \
        -out=tfplan \
        -var-file='variables/${{inputs.environmentName }}.eus.variables.tfvars' \

  - name: Terraform Apply
    shell: ${{ inputs.shell }}
    working-directory: ${{ inputs.workingDirectory }}
    id: tf-apply
    run: |
      terraform apply \
        -out=tfplan \
        -var-file='variables/${{inputs.environmentName }}.eus.variables.tfvars' 
        -auto-approve \